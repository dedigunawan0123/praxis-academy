/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package latihanCreateThread;

public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        // System.out.println(new App().getGreeting());

        // dg. Ini adalah untuk create thread menggunakan interface Runnable
        System.out.println("Ini adalah untuk create thread menggunakan interface Runnable");
        HelloRunnable helloRunnable = new HelloRunnable();
        helloRunnable.helloRunnableFirst();

        // dg. Ini adalah untuk create thread menggunakan class Thread
        System.out.println("Ini adalah untuk create thread menggunakan class Thread");
        HelloThread helloThread = new HelloThread();
        helloThread.helloThreadFirst();

        // note. cara Runnable adalah yg paling umum dipakai.

        // dg. Ini adalah untuk pause thread menggunakan method sleep dan meng-interupsi thread
        // menggunakan interrupted method
        System.out.println("Ini adalah untuk pause thread menggunakan method sleep");
        SleepMessages sleepMessages = new SleepMessages();
        try {
            sleepMessages.sleepMessagesFirst();
        }
        catch (InterruptedException e){
            e.printStackTrace();
            System.out.println("Ada Interrupted Exception");
            Thread.interrupted();
            System.out.println("Thread sudah di interupted");
        }

        // dg. Ini untuk join thread, digunakan untuk menunggu thread lain sampai selesai 
        // menyelesaikan prosesnya.
        HelloThread t1 = new HelloThread();
        HelloThread t2 = new HelloThread();
        HelloThread t3 = new HelloThread();

        // thread t1 starts 
        t1.start(); 
  
        // starts second thread after when 
        // first thread t1 has died. 
        try
        { 
            System.out.println("Current Thread: "
                  + Thread.currentThread().getName()); 
            t1.join(); 
        } 
  
        catch(Exception ex) 
        { 
            System.out.println("Exception has " + 
                                "been caught" + ex); 
        } 
  
        // t2 starts 
        t2.start(); 
  
        // starts t3 after when thread t2 has died. 
        try
        { 
            System.out.println("Current Thread: "
                 + Thread.currentThread().getName()); 
            t2.join(); 
        } 
  
        catch(Exception ex) 
        { 
            System.out.println("Exception has been" + 
                                    " caught" + ex); 
        } 
  
        t3.start(); 
    } 
} 


